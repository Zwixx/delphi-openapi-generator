unit {{apiPackage}};

{ ********************************************************************** }
{                                                                        }
{ Dies ist ein automatisch generiertes Unit aus:                         }
{ {{unescapedAppDescription}}                                            }
{                                                                        }
{ ********************************************************************** }

interface

uses REST.Types, REST.Client, System.JSON, REST.Json, System.SysUtils, 
  System.StrUtils, NetEncoding;

const
{{#servers}}
  host = '{{url}}';
{{/servers}}

type

{{#models}}
{{#model}}
  {{classname}} = class;
{{/model}}
{{/models}}

{{#delphi-arrays}}
  {{{.}}}
{{/delphi-arrays}}

{{#models}}
{{#model}}

  {{classname}} = class(TObject)
  private
    { Variablen }
    {{#vars}}
    F{{name}} : {{vendorExtensions.delphi-datatype}};
    {{/vars}}
    { Getter }
    {{#vars}}
    function Get_{{name}}() : {{vendorExtensions.delphi-datatype}};
    {{/vars}}
    { Setter }
    {{#vars}}
    procedure Set_{{name}}({{name}} : {{vendorExtensions.delphi-datatype}});
    {{/vars}}
  public
    {{#vars}}
    property {{name}}: {{vendorExtensions.delphi-datatype}} read Get_{{name}} write Set_{{name}};
    {{/vars}}
  end;
{{/model}}
{{/models}}

  TOnBeforeRequest = procedure(Request : TRESTRequest);
  TOnAfterRequest = procedure(Request : TRESTRequest);

  TService = class(TObject)
  private
    FOnBeforeRequest : TOnBeforeRequest;
    FOnAfterRequest : TOnAfterRequest;
    Request : TRESTRequest;
    procedure ClearRequest;
    procedure ExecuteRequest;
  public
  	constructor Create();
  	destructor Destroy(); 
  {{#apiInfo.apis}}
  {{#operations}}
  {{#operation}}
  {{#vendorExtensions.delphi-function}}
  {{#responses}}
  {{#vendorExtensions.delphi-relevant}}
    function {{operationId}}({{#allParams}}{{paramName}} : {{dataType}}{{^-last}}; {{/-last}}{{/allParams}}) : {{dataType}};
  {{/vendorExtensions.delphi-relevant}}
  {{/responses}}
  {{/vendorExtensions.delphi-function}}
  {{#vendorExtensions.delphi-procedure}}
    procedure {{operationId}}({{#allParams}}{{paramName}} : {{dataType}}{{^-last}}; {{/-last}}{{/allParams}});
  {{/vendorExtensions.delphi-procedure}}
  {{/operation}}
  {{/operations}}
  {{/apiInfo.apis}}
    property OnBeforeRequest : TOnBeforeRequest read FOnBeforeRequest write FOnBeforeRequest;
    property OnAfterRequest : TOnAfterRequest read FOnAfterRequest write FOnAfterRequest;
  end;
  
implementation

{ Getter }
{{#models}}
{{#model}}
{{#vars}}

function {{classname}}.Get_{{name}}() : {{vendorExtensions.delphi-datatype}};
begin
  Result := F{{name}};
end;
{{/vars}}
{{/model}}
{{/models}}

{ Setter }
{{#models}}
{{#model}}
{{#vars}}

procedure {{classname}}.Set_{{name}}({{name}}: {{vendorExtensions.delphi-datatype}});
begin
  F{{name}} := {{name}};
end;
{{/vars}}
{{/model}}
{{/models}}

{ Zugriffsmethoden }

{{#apiInfo.apis}}
{{#operations}}
{{#operation}}
{{#vendorExtensions.delphi-function}}
{{#responses}}
{{#vendorExtensions.delphi-relevant}}
function TService.{{operationId}}({{#allParams}}{{paramName}} : {{dataType}}{{^-last}}; {{/-last}}{{/allParams}}) : {{dataType}};
{{/vendorExtensions.delphi-relevant}}
{{/responses}}
{{/vendorExtensions.delphi-function}}
{{#vendorExtensions.delphi-procedure}}
procedure TService.{{operationId}}({{#allParams}}{{paramName}} : {{dataType}}{{^-last}}; {{/-last}}{{/allParams}});
{{/vendorExtensions.delphi-procedure}}
var
  baseUrl : String;
  {{^bodyParams.isEmpty}}
  body : String;
  {{/bodyParams.isEmpty}}
begin
  ClearRequest;
  
  baseUrl := ReplaceStr(host, '{basepath}', '{{basePathWithoutHost}}{{path}}');
  {{#pathParams}}
  baseUrl := ReplaceStr(baseUrl, '{{=<% %>=}}{<%={{ }}=%>{{paramName}}{{=<% %>=}}}<%={{ }}=%>', TNetEncoding.URL.Encode({{vendorExtensions.delphi-toString}}));
  {{/pathParams}}
  {{^queryParams.isEmpty}}

  {{#queryParams}}
  Request.AddParameter('{{paramName}}', {{vendorExtensions.delphi-toString}});
  {{/queryParams}}
  {{/queryParams.isEmpty}}
  {{^bodyParams.isEmpty}}
  
  body := '';
  {{#bodyParams}}
  body := body + '{{paramName}}=' + {{vendorExtensions.delphi-toString}} + #13#10;
  {{/bodyParams}}
  if body <> '' then
  begin
    Request.AddBody(body);
  end;
  {{/bodyParams.isEmpty}}
  
  Request.Client.BaseURL := baseUrl;
  Request.Method := rm{{httpMethod}};

  ExecuteRequest;
    
{{#vendorExtensions.delphi-function}}
  if Request.Response.Content <> '' then
    Result := TJson.JsonToObject<{{#responses}}{{dataType}}{{/responses}}>(Request.Response.Content)
  else
    Result := nil;
{{/vendorExtensions.delphi-function}}
end;

{{/operation}}
{{/operations}}
{{/apiInfo.apis}}

constructor TService.Create();
begin
  Request := TRESTRequest.Create(nil);
  Request.Client := TRestClient.Create(nil);
  Request.Response := TRESTResponse.Create(nil);
end;

destructor TService.Destroy(); 
begin
  Request.Response.Free;
  Request.Client.Free;
  FreeAndNil(Request);
end;

procedure TService.ClearRequest;
begin
  Request.ClearBody;
  Request.Params.Clear;
end;

procedure TService.ExecuteRequest;
begin
  if Assigned(OnBeforeRequest) then
    OnBeforeRequest(Request);
  Request.Execute;
  if Assigned(OnAfterRequest) then
    OnAfterRequest(Request);
end;

end.